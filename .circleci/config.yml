version: 2.1

orbs:
  # important to set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID and AWS REGION to use aws orb
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.4.4

# PIPELINE PARAMETERS
params:
  memstash-token:
    type: string

# COMMANDS

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id:
        type: string
      delete-bucket:
        type: boolean
        default: false
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment"
            aws cloudformation delete-stack --stack-name back-<<parameters.id>>
            aws cloudformation delete-stack --stack-name front-<<parameters.id>>
            if <<parameters.delete-bucket>>
            then
              aws s3 rm s3://udapeople-$CIRCLE_WORKFLOW_ID --recursive
            fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      id:
        type: string
        default: $CIRCLE_WORKFLOW_ID   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: <<parameters.id>>" \
            --request GET https://api.memstash.io/values/migration_<<parameters.id>>)

            echo "Success: $SUCCESS";
            # SUCCESS = 1
            if(($SUCCESS==1)); 
            then
             cd ~/project/backend
             npm install
             # Add revert code here. You can find this in the Getting Started section.
             npm run migrations:revert
             # exit 1
            fi
          when: on_fail

  alert-error:
    steps:
      - slack/notify:
          channel: C02CGBL09FT
          event: fail 
          template: basic_fail_1  


# JOBS            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            echo "Building frontend"
            cd frontend
            npm install
            npm run build
            cd ../
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - alert-error

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            # exit 1
            echo "Building backend"
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - alert-error

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Font-end test
          command: |
            # Your code here
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            # Your code here
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["fontend-build"]
      # Your job code here
      - run:
          name: Font-end Scan
          command: |
            # Your code here
            #  exit 1
            cd frontend
            npm i
            npm audit fix
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
            # Your code here
            #  exit 1
            cd backend
            npm i
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: JQ & TAR & GZIP install
          command: |
            yum install -y jq
            yum install -y tar
            yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name back-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name front-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            rm .circleci/ansible/inventory.txt
            echo "[web]" >>  .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}          
      # - run:
      #     name: Describe Stack Events
      #     command: |
      #       aws cloudformation describe-stack-events --stack-name back-${CIRCLE_WORKFLOW_ID:0:7}
      #       aws cloudformation describe-stack-events --stack-name front-${CIRCLE_WORKFLOW_ID:0:7}
      #     when: on_fail
      - alert-error


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11 
      # - image: python:3.9-alpine3.14
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - run:
          name: Check FINGER_PRINTS
          command: |
            echo $UDACITYKEY_FINGERPRINT
      - add_ssh_keys:
          fingerprints: $UDACITYKEY_FINGERPRINT
      - attach_workspace:
          at: ~/
          # at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update jq
            apk add --update ansible
            pip3 install awscli
            apk add curl
      - aws-cli/setup
      - run:
          name: Check variables
          command: |
            pwd
            ls -la
            echo $UDACITYKEY_FINGERPRINT
            echo "INVENTORY_FILE:"
            cat .circleci/ansible/inventory.txt
      # - aws-cli/setup
      - run:
          name: Create .env
          command: |
            cd backend/

            export NODE_ENV=local
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            # Use these values for the local PG database from the Docker Compose file
            export TYPEORM_HOST=localhost
            export TYPEORM_PORT=5532
            export TYPEORM_USERNAME=postgres
            export TYPEORM_PASSWORD=password
            export TYPEORM_DATABASE=glee

            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            echo "-.ENV FILE: "
            cat .env
             
            pwd

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - run:
          name: Configure server
          command: |
            echo "PWD:"
            pwd
            ls -la

            echo "ENV_FILE:"
            cat /root/project/backend/.env

            echo "INVENTORY_FILE:"
            cat .circleci/ansible/inventory.txt
            
            # export ANSIBLE_HOST_KEY_CHECKING=False # check necessity
            ansible-playbook -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - alert-error

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      # - restore_cache:
      #     keys: [backend-build]
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Run check public IP
          command: |
            curl -s ifconfig.me
      - run:
          name: Run NPM INSTALL
          command: |

            cd backend
            sudo npm i -y # remove after comments removal            
            echo LS -LA DEBUG:
            ls -la # debug
            echo PWD DEBUG:
            pwd
            
            cd ../util
            docker-compose up
      - run:
          name: Run migrations
          command: |
            # Your code here
            # exit 1 

            cd backend
            
            export NODE_ENV=local
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            # Use these values for the local PG database from the Docker Compose file
            export TYPEORM_HOST=localhost
            export TYPEORM_PORT=5532
            export TYPEORM_USERNAME=postgres
            export TYPEORM_PASSWORD=password
            export TYPEORM_DATABASE=glee
            
            pwd
            ls -la            

            # sudo npm i -g pm2
            # sudo npm i typescript
            
            echo $TYPEORM_MIGRATIONS_DIR
            echo $TYPEORM_ENTITIES
            echo $TYPEORM_MIGRATIONS
            # Use these values for the local PG database from the Docker Compose file
            echo $TYPEORM_HOST
            echo $TYPEORM_PORT
            echo $TYPEORM_USERNAME
            echo $TYPEORM_PASSWORD
            echo $TYPEORM_DATABASE

            npm i -y # remove after comments removal
            
            echo LS -LA DEBUG:
            ls -la # debug

            npm run migrations >> migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            # exit 1
            
            cat migrations.txt
            if cat migration.log | grep -c "has been executed successfully" > 0
            then
              curl -H "Content-Type: text/plain" \
              -H "token: $CIRCLE_WORKFLOW_ID" \
              --request PUT --data "1" https://api.memstash.io/values/migrations_$CIRCLE_WORKFLOW_ID
            else
              echo "-- ERROR NO SUCCESFULL MIGRATION"
              exit 99
            fi
      - run:
          name: Look for logs when error
          when: on_fail
          command: |
            # Your code here
            # exit 1
            
            echo ERROR LOGS: 
            cat /home/circleci/.npm/_logs/*

            echo MIGRATIONS.TXT:
            cat migrations.txt
     # Here's where you will add some code to rollback on failure
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}
      - alert-error

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend : see line below
            # npm install : already attached the workspace
            # yum install -y sed TODO: CHECK NECESSITY
            npm run build
      - run:
          name: Get backend url
          command: |
            # your code here
            # export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt) : -n = NOT PRINTING
            export BACKEND_IP=$(sed 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 cp --recursive frontend/dist s3://udapeople-$CIRCLE_WORKFLOW_ID
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          delete-bucket: true
      - alert-error
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ${UDACITYKEY_FINGERPRINT}
      - attach_workspace:
          # at: .
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible tar gzip 
      - run:
          name: Deploy backend
          command: |
            # your code here
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - alert-error

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - alert-error

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - alert-error

  cleanup:
    docker:
      # Docker image here
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - alert-error

 
# WORKFLOWS           

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              # only: [master] 
              only: [circleci-editor/master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]