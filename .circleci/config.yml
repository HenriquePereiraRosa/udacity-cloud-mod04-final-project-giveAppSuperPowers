version: 2.1

orbs:
  # important to set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY_ID and AWS REGION to use aws orb
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.4.4

# COMMANDS

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying envoironment"
            aws cloudformation delete-stack --stack-name back-<<parameters.id>>
            aws cloudformation delete-stack --stack-name front-<<parameters.id>>
            # aws s3 rm s3://udapeople-<<parameters.id>> --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      flow_id:
        type: string
        default: $CIRCLE_WORKFLOW_ID   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
          when: on_success

  alert:
    parameters:
      # Add parameter here
      msg:
        type: string
        default: Error
    steps:
      - slack/notify:
          # channel: C02CGBL09FT
          channel: cicd-jobs-notification
          event: fail 
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "<<parameters.msg>>",
                      "emoji": true
                    }
                  ]
                }
              ]
            }    


# JOBS            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            echo "Building frontend"
            cd frontend
            npm install
            npm run build
            cd ../
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: C02CGBL09FT 
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            # exit 1
            echo "Building backend"
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C02CGBL09FT 
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Font-end test
          command: |
            # Your code here
            cd frontend
            npm run test
      # - slack/notify:
      #     event: fail
      #     template: basic_fail_1
      # - alert:
      #   msg: Error
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            # Your code here
            cd backend
            npm run test
      - slack/notify:
          channel: C02CGBL09FT 
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["fontend-build"]
      # Your job code here
      - run:
          name: Font-end Scan
          command: |
            # Your code here
            #  exit 1
            cd frontend
            npm i
            npm audit fix
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: C02CGBL09FT 
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Back-end scan
          command: |
            # Your code here
            #  exit 1
            cd backend
            npm i
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C02CGBL09FT 
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-back-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name back-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-front-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name front-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: JB install
          command: |
            sudo yum install -y jq
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1
      - alert:
          msg: Error
      - slack/notify:
          event: fail
          template: basic_fail_1

  # deploy-infrastructure:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install AWS
  #         command: |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople-back-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --stack-name back-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople-front-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --stack-name front-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           # Your code here
  #           exit 1
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - slack/notify:
  #         channel: C02CGBL09FT
  #         event: fail
  #         template: basic_fail_1
  #     - alert:
  #         msg: Error
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ${FINGERPRINTS}
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ${FINGERPRINTS}
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

  cleanup:
    docker:
      # Docker image here
      - image: alpine:3.14
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - slack/notify:
          channel: C02CGBL09FT
          event: fail
          template: basic_fail_1

 
# WORKFLOWS           

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              # only: [master] 
              only: [circleci-editor/master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]